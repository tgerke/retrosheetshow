[{"path":"https://tgerke.github.io/retrosheetshow/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Travis Gerke Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"comparison-retrosheetshow-vs-retrosheet-package","dir":"Articles","previous_headings":"","what":"Comparison: retrosheetshow vs retrosheet Package","title":"Comparison with Other Packages","text":"document compares retrosheetshow package existing retrosheet package highlights improvements learnings.","code":""},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"retrosheet-original","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > Architecture Comparison","what":"retrosheet (Original)","title":"Comparison with Other Packages","text":"HTTP Client: httr (older generation) Style: Base R focused Parsing: Uses scan() base R functions Dependencies: httr, xml2, rvest, stringr, stringi, data.table Documentation: Basic","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"retrosheetshow-this-package","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > Architecture Comparison","what":"retrosheetshow (This Package)","title":"Comparison with Other Packages","text":"HTTP Client: httr2 (modern, pipe-friendly) Style: Tidyverse throughout Parsing: Uses readr tidy data structures Dependencies: Modern tidyverse stack Documentation: Comprehensive examples","code":""},{"path":[]},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"retry-logic-implemented","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > What We Learned and Implemented","what":"1. ✅ Retry Logic (Implemented)","title":"Comparison with Other Packages","text":"approach (httr): improved approach (httr2): Benefits: - Automatic retries network failures - Exponential backoff (prevents hammering server) - Configurable timeouts - robust unstable connections","code":"RETRY(\"GET\", url = path, write_disk(tmp, overwrite=TRUE), timeout(15)) httr2::request(url) |>   httr2::req_retry(max_tries = 3, backoff = ~2) |>   httr2::req_timeout(60) |>   httr2::req_perform(path = zip_file)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"reference-data-helpers-implemented","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > What We Learned and Implemented","what":"2. ✅ Reference Data Helpers (Implemented)","title":"Comparison with Other Packages","text":"New functions added: - get_park_ids() - Ballpark codes names - get_team_ids() - Team codes year - get_player_ids() - Player biographical database Example usage:","code":"# Find stadium info parks <- get_park_ids() parks |> filter(grepl(\"Fenway\", name))  # Get 2024 teams teams <- get_team_ids(2024)  # Look up players players <- get_player_ids() players |> filter(grepl(\"Judge\", last_name))"},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"smart-caching-already-had-improved","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > What We Learned and Implemented","what":"3. ✅ Smart Caching (Already Had, Improved)","title":"Comparison with Other Packages","text":"approach: - Manual cache directory specification - User must explicitly enable - Uses cache parameter call approach: - Automatic caching default - Uses standard R cache directory (tools::R_user_dir()) - Cache management functions (cache_status(), clear_cache()) - Persists across sessions - Can disabled use_cache(FALSE)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"dynamic-file-discovery-not-implemented","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > What We Learned and Implemented","what":"4. ⚠️ Dynamic File Discovery (Not Implemented)","title":"Comparison with Other Packages","text":"approach: didn’t implement: - hardcoded year ranges work well - Scraping adds fragility (website changes break code) - list_events() check_availability=TRUE achieves similar goal - Can add later needed Potential future implementation: use rvest dynamically discover years, need handle: - Website structure changes - Rate limiting - Error handling","code":"# Scrapes Retrosheet website to find available files getFileNames <- function() {   docs <- lapply(full, function(x) {     content <- RETRY(\"GET\", url = x, timeout(15))     read_html(content, asText = TRUE)   })   # ... parse HTML for links }"},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"partial-parsing-not-implemented","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > What We Learned and Implemented","what":"5. ⚠️ Partial Parsing (Not Implemented)","title":"Comparison with Other Packages","text":"approach game logs: didn’t implement: - Event files need full parsing context (game_id tracking, etc.) - caching, full parsing fast enough - Adds complexity marginal benefit - add game logs support ","code":"getPartialGamelog <- function(year, glFields, date = NULL) {   # Only read specified columns   sel <- match(glFields, retrosheetFields$gamelog)   out <- read.csv(fname, header = FALSE)   out <- out[sel] }"},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"game-logs-rosters-schedules-not-implemented","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > What We Learned and Implemented","what":"6. ❌ Game Logs, Rosters, Schedules (Not Implemented)","title":"Comparison with Other Packages","text":"support: - Game logs: Season summaries (one row per game) - Rosters: Team rosters year - Schedules: Game schedules focused events: - Events (play--play) richest data - Wanted one thing really well - Can add types later - Game info can extracted events Future consideration: add separate functions: - get_gamelogs(year) - get_rosters(year) - get_schedules(year)","code":""},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"retrosheet-package","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > Code Quality Comparison","what":"retrosheet Package","title":"Comparison with Other Packages","text":"","code":"# Their style (base R) doGame <- function(x) {   sc <- scan(text = x, sep = \",\", what = \"\", flush = TRUE, quiet = TRUE)   v <- vector(\"list\", 8L)   for(i in seq_len(8L)) {     sx <- substr(x, regexpr(\",\", x, fixed = TRUE) + 1L, nchar(x))     v[[i]] <- sx[match(sc, outer) == i]   }   # ... more base R manipulation }"},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"retrosheetshow-package","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > Code Quality Comparison","what":"retrosheetshow Package","title":"Comparison with Other Packages","text":"advantages: - readable - Easier maintain - Better new R users - Follows modern best practices","code":"# Our style (tidyverse) parse_event_file <- function(lines, year) {   parsed <- purrr::map_dfr(seq_along(lines), function(i) {     line <- lines[i]     parts <- stringr::str_split(line, \",\", simplify = FALSE)[[1]]          tibble::tibble(       line_number = i,       record_type = parts[1],       fields = list(parts[-1])     )   })   # ... pipe-friendly operations }"},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"initial-download","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > Performance Comparison","what":"Initial Download","title":"Comparison with Other Packages","text":"retrosheet: ~2 minutes (caching) retrosheetshow: ~2 minutes (caching) Winner: Tie (cache effectively)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"repeated-access","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > Performance Comparison","what":"Repeated Access","title":"Comparison with Other Packages","text":"retrosheet: Fast cache retrosheetshow: Fast automatic cache Winner: retrosheetshow (automatic, transparent)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"parsing-speed","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > Performance Comparison","what":"Parsing Speed","title":"Comparison with Other Packages","text":"retrosheet: Fast (base R, data.table) retrosheetshow: Slightly slower (tidyverse overhead) Winner: retrosheet (marginal)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"developer-experience","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > Performance Comparison","what":"Developer Experience","title":"Comparison with Other Packages","text":"retrosheet: Requires understanding base R retrosheetshow: Works familiar tidyverse tools Winner: retrosheetshow (tidyverse users)","code":""},{"path":[]},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"use-retrosheet-if","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > Recommendations for Users","what":"Use retrosheet if:","title":"Comparison with Other Packages","text":"prefer base R need game logs/rosters/schedules need maximum parsing speed ’re comfortable data.table","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"use-retrosheetshow-if","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > Recommendations for Users","what":"Use retrosheetshow if:","title":"Comparison with Other Packages","text":"use tidyverse want modern, pipe-friendly code value clear documentation want automatic caching ’re building tidy workflows want better progress feedback","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"future-enhancements","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package","what":"Future Enhancements","title":"Comparison with Other Packages","text":"Based comparison, add:","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"completed","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > Future Enhancements","what":"✅ Completed","title":"Comparison with Other Packages","text":"✅ Retry logic - DONE ✅ Reference data helpers - DONE ✅ Timeout handling - DONE ✅ Game log support - DONE ✅ Roster files - DONE ✅ Schedule files - DONE","code":""},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"low-priority","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package > Future Enhancements","what":"Low Priority","title":"Comparison with Other Packages","text":"Dynamic file discovery - Scraping website (adds fragility) Partial parsing - Marginal benefit caching Box score format - Pre-1911 data (different structure)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"conclusion","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package","what":"Conclusion","title":"Comparison with Other Packages","text":"packages valuable, serving different audiences: retrosheet (colindouglas): - Mature, stable - Comprehensive file type coverage - Base R focused - Good power users retrosheetshow (package): - Modern, tidyverse-focused - Excellent documentation - Automatic caching - Better developer experience - Focus play--play (events) - Room grow Key improvements made review: 1. ✅ Added retry logic backoff 2. ✅ Added timeout handling 3. ✅ Added reference data helpers (parks, teams, players) 4. ✅ Enhanced caching system unique advantages: - Fully tidyverse-integrated - Automatic caching - Comprehensive documentation - Modern httr2 approach - Better user experience - Now feature-complete game logs, rosters, schedules!","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/COMPARISON.html","id":"references","dir":"Articles","previous_headings":"Comparison: retrosheetshow vs retrosheet Package","what":"References","title":"Comparison with Other Packages","text":"retrosheet package (GitHub) httr2 documentation Retrosheet website","code":""},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"understanding-download-times","dir":"Articles","previous_headings":"Performance Guide","what":"Understanding Download Times","title":"Performance Guide","text":"Retrosheet event files comprehensive datasets can large: Regular season file: ~5-15 MB compressed, ~50-100 MB uncompressed First download: 1-2 minutes (depends network speed) Cached access: < 5 seconds (just parsing, download) initial download time normal unavoidable, package now caches files automatically.","code":""},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"how-it-works","dir":"Articles","previous_headings":"Performance Guide > Caching System (NEW!)","what":"How It Works","title":"Performance Guide","text":"Starting first download, retrosheetshow automatically caches files locally:","code":"library(retrosheetshow)  # First time: downloads and caches (slow - ~2 minutes) events_2024 <- get_events(year = 2024)  # Second time: uses cache (fast - ~5 seconds) events_2024 <- get_events(year = 2024)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"cache-management","dir":"Articles","previous_headings":"Performance Guide > Caching System (NEW!)","what":"Cache Management","title":"Performance Guide","text":"View ’s cached: Clear cache free disk space: Temporarily disable caching:","code":"# See cached files cache_status() #> ℹ Cache location: ~/Library/Caches/org.R-project.R/R/retrosheetshow #> ℹ Total: 3 files, 15.4 MB #> # A tibble: 3 × 5 #>    year type    size_mb modified            path #>   <int> <chr>     <dbl> <dttm>              <chr> #> 1  2024 regular    5.2  2024-01-15 10:30:00 ... #> 2  2023 regular    5.1  2024-01-15 09:15:00 ... #> 3  2024 post       0.8  2024-01-15 11:00:00 ... # Clear all cache clear_cache()  # Clear specific years clear_cache(year = 2020:2022)  # Clear specific types clear_cache(type = \"post\")  # Skip confirmation clear_cache(confirm = FALSE) # Disable for this session (always download fresh) use_cache(FALSE)  # Re-enable use_cache(TRUE)"},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"be-patient-on-first-download","dir":"Articles","previous_headings":"Performance Guide > Performance Tips","what":"1. Be Patient on First Download","title":"Performance Guide","text":"first download year’s data take 1-2 minutes. normal: subsequent calls fast:","code":"# This WILL take time the first time events_2024 <- list_events(year = 2024) |>   get_events() #> ✔ Checked 1 file [591ms] #> ℹ Downloading 1 event file #> ℹ Downloading 2024 regular... #> ✖ Downloading 2024 events [1m 56.9s]  # <- This is normal! # Second call uses cache events_2024 <- get_events(year = 2024) #> ℹ Downloading 1 event file #> ℹ Using cached file for 2024 regular #> ✔ Downloaded and parsed 1,234,567 records [4.2s]  # <- Much faster!"},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"download-once-analyze-multiple-times","dir":"Articles","previous_headings":"Performance Guide > Performance Tips","what":"2. Download Once, Analyze Multiple Times","title":"Performance Guide","text":"Don’t re-download session:","code":"# ❌ BAD: Downloads multiple times games1 <- get_events(year = 2024) |> get_game_info() plays1 <- get_events(year = 2024) |> get_plays()  # Downloads again!  # ✅ GOOD: Download once, use multiple times events <- get_events(year = 2024)  # Download once games <- get_game_info(events)     # Reuse plays <- get_plays(events)         # Reuse"},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"filter-after-download","dir":"Articles","previous_headings":"Performance Guide > Performance Tips","what":"3. Filter After Download","title":"Performance Guide","text":"Don’t download multiple times filter:","code":"# ❌ SOMEWHAT INEFFICIENT yankees_games <- list_events(year = 2024) |>   get_events() |>   get_game_info() |>   filter(hometeam == \"NYA\" | visteam == \"NYA\")  # ✅ BETTER (uses cache on subsequent runs) events <- get_events(year = 2024)  # Cached after first run games <- get_game_info(events) yankees_games <- games |>   filter(hometeam == \"NYA\" | visteam == \"NYA\")"},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"download-multiple-years-strategically","dir":"Articles","previous_headings":"Performance Guide > Performance Tips","what":"4. Download Multiple Years Strategically","title":"Performance Guide","text":"multi-year analysis:","code":"# Option 1: Download all at once (slow first time, then cached) events_multi <- get_events(year = 2020:2024)  # Option 2: Download years individually (can stop/resume) events_2020 <- get_events(year = 2020) events_2021 <- get_events(year = 2021) # ... download more as needed all_events <- bind_rows(events_2020, events_2021, ...)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"use-availability-checking-wisely","dir":"Articles","previous_headings":"Performance Guide > Performance Tips","what":"5. Use Availability Checking Wisely","title":"Performance Guide","text":"Skip availability checking know files exist:","code":"# Slow: Checks if each file exists before download events <- list_events(year = 2020:2024, check_availability = TRUE) |>   get_events()  # Faster: Skip checking (files will still download/cache correctly) events <- list_events(year = 2020:2024, check_availability = FALSE) |>   get_events()  # Or just: events <- get_events(year = 2020:2024)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"memory-management-for-large-datasets","dir":"Articles","previous_headings":"Performance Guide > Performance Tips","what":"6. Memory Management for Large Datasets","title":"Performance Guide","text":"large multi-year downloads:","code":"# Process and summarize year by year results <- purrr::map_dfr(2020:2024, function(year) {   events <- get_events(year = year)   plays <- get_plays(events)      # Summarize before combining   summary <- plays |>     group_by(game_id) |>     summarize(n_plays = n(), ...)      rm(events, plays)  # Free memory   gc()               # Garbage collect      summary })"},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"benchmarks","dir":"Articles","previous_headings":"Performance Guide","what":"Benchmarks","title":"Performance Guide","text":"Typical performance modern machine good internet:","code":""},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"slow-downloads","dir":"Articles","previous_headings":"Performance Guide > Troubleshooting Slow Performance","what":"Slow Downloads","title":"Performance Guide","text":"downloads consistently slow (> 5 minutes): Check network: Test internet speed Try different time: Retrosheet servers may busy Disable VPN: VPNs slow downloads Check cache: Verify caching enabled cache_status()","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"slow-parsing","dir":"Articles","previous_headings":"Performance Guide > Troubleshooting Slow Performance","what":"Slow Parsing","title":"Performance Guide","text":"parsing slow even cache: Parse selectively: Use parse_event_records() specific types Filter early: Reduce data size complex operations Check memory: Large datasets need RAM (4+ GB recommended)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"cache-issues","dir":"Articles","previous_headings":"Performance Guide > Troubleshooting Slow Performance","what":"Cache Issues","title":"Performance Guide","text":"caching doesn’t seem work:","code":"# Check cache status cache_status()  # Check if caching is enabled caching_enabled()  # Should return TRUE  # Check cache location cache_dir()  # Test: clear and re-download clear_cache(year = 2024, confirm = FALSE) events <- get_events(year = 2024)  # Should download events <- get_events(year = 2024)  # Should use cache (fast)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"network-free-usage","dir":"Articles","previous_headings":"Performance Guide","what":"Network-Free Usage","title":"Performance Guide","text":"downloading files , can use offline:","code":"# While online: download and cache events_2024 <- get_events(year = 2024)  # Later, even offline: uses cache events_2024 <- get_events(year = 2024)  # Works without internet!"},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"best-practices-summary","dir":"Articles","previous_headings":"Performance Guide","what":"Best Practices Summary","title":"Performance Guide","text":"✅ patient first download (1-2 min normal) ✅ Let caching work - subsequent calls fast ✅ Download per session - save variable, reuse ✅ Filter parsing - don’t re-download filter ✅ Check cache status - know cached ✅ Clear old cache - free disk space needed ✅ Skip availability checks - know files exist","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"example-efficient-workflow","dir":"Articles","previous_headings":"Performance Guide","what":"Example: Efficient Workflow","title":"Performance Guide","text":"","code":"library(retrosheetshow) library(dplyr)  # First run: downloads and caches (~2 min) # Subsequent runs: uses cache (~5 sec) events_2024 <- get_events(year = 2024)  # Parse once, use many times games <- get_game_info(events_2024) plays <- get_plays(events_2024)  # Now analyze quickly yankees_games <- games |>   filter(hometeam == \"NYA\" | visteam == \"NYA\")  yankees_plays <- plays |>   semi_join(yankees_games, by = \"game_id\")  home_runs <- plays |>   filter(grepl(\"^HR\", event))  # Check what's cached cache_status()  # Clear cache when done (optional) # clear_cache()"},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"future-optimizations","dir":"Articles","previous_headings":"Performance Guide","what":"Future Optimizations","title":"Performance Guide","text":"package may add future versions: Parallel downloads multiple years Compressed -memory caching Incremental updates (download new games) Pre-parsed cache format Progress bars ETA","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/PERFORMANCE.html","id":"questions","dir":"Articles","previous_headings":"Performance Guide","what":"Questions?","title":"Performance Guide","text":"Check ?get_events caching details Run cache_status() see ’s cached Use clear_cache() suspect cache corruption File issue downloads consistently > 5 minutes","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"retrosheet-event-file-format-reference","dir":"Articles","previous_headings":"","what":"Retrosheet Event File Format Reference","title":"Retrosheet Format Reference","text":"document provides quick reference understanding Retrosheet event file formats parsed retrosheetshow.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"record-types","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference","what":"Record Types","title":"Retrosheet Format Reference","text":"Retrosheet event files contain several types records, separate line:","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"id---game-identifier","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference > Record Types","what":"id - Game Identifier","title":"Retrosheet Format Reference","text":"Format: id,GAMEID Example: id,NYA202304070 First 3 characters: Home team code Next 4 digits: Year Next 2 digits: Month Next 2 digits: Day Last digit: Game number (0 single game, 1-2 doubleheaders)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"version---file-format-version","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference > Record Types","what":"version - File Format Version","title":"Retrosheet Format Reference","text":"Format: version,VERSION Example: version,2 Indicates version Retrosheet event file format.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"info---game-information","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference > Record Types","what":"info - Game Information","title":"Retrosheet Format Reference","text":"Format: info,TYPE,VALUE Examples: - info,visteam,BOS - Visiting team code - info,hometeam,NYA - Home team code - info,date,2023/04/07 - Game date - info,number,0 - Game number - info,site,NYA03 - Ballpark code - info,starttime,7:05PM - Start time - info,daynight,night - Day night game - info,usedh,true - Designated hitter used - info,umphome,smithj01 - Home plate umpire - info,temp,72 - Temperature - info,winddir,torf - Wind direction - info,windspeed,10 - Wind speed - info,fieldcond,unknown - Field condition - info,precip,unknown - Precipitation - info,sky,unknown - Sky condition - info,timeofgame,180 - Game duration minutes - info,attendance,45678 - Attendance","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"start---starting-lineup","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference > Record Types","what":"start - Starting Lineup","title":"Retrosheet Format Reference","text":"Format: start,PLAYERID,\"PLAYERNAME\",TEAM,BATTINGPOS,FIELDPOS Example: start,judga001,\"Aaron Judge\",0,1,9 PLAYERID: Retrosheet player ID PLAYERNAME: Player’s name (quotes) TEAM: 0 visiting team, 1 home team BATTINGPOS: Position batting order (1-9) FIELDPOS: Defensive position (1-10, see )","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"play---play-by-play-event","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference > Record Types","what":"play - Play-by-Play Event","title":"Retrosheet Format Reference","text":"Format: play,INNING,TEAM,PLAYERID,COUNT,PITCHES,EVENT Example: play,1,0,judga001,22,BCFBX,S7/G INNING: Inning number (top 1st inning 1) TEAM: 0 visiting team, 1 home team PLAYERID: Batter’s Retrosheet ID COUNT: Balls strikes (e.g., “32” = 3 balls, 2 strikes) PITCHES: Sequence pitches (B=ball, C=called strike, S=swinging strike, etc.) EVENT: Play outcome (complex notation, see )","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"sub---substitution","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference > Record Types","what":"sub - Substitution","title":"Retrosheet Format Reference","text":"Format: sub,PLAYERID,\"PLAYERNAME\",TEAM,BATTINGPOS,FIELDPOS Example: sub,carpe001,\"Carpenter\",0,3,5 format start indicates substitution.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"com---comment","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference > Record Types","what":"com - Comment","title":"Retrosheet Format Reference","text":"Format: com,\"COMMENT TEXT\" Example: com,\"$Hit hard left field\" Contains additional information annotations.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"data---additional-data","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference > Record Types","what":"data - Additional Data","title":"Retrosheet Format Reference","text":"Format: data,TYPE,PLAYERID,VALUE Example: data,er,judga001,2 TYPE: Usually “er” earned runs PLAYERID: Player ID VALUE: Numeric value","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"defensive-positions","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference","what":"Defensive Positions","title":"Retrosheet Format Reference","text":"Pitcher Catcher First Base Second Base Third Base Shortstop Left Field Center Field Right Field Designated Hitter Pinch Hitter Pinch Runner","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"event-codes-common-examples","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference","what":"Event Codes (Common Examples)","title":"Retrosheet Format Reference","text":"Retrosheet uses detailed notation system events. common examples:","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"basic-outcomes","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference > Event Codes (Common Examples)","what":"Basic Outcomes","title":"Retrosheet Format Reference","text":"S7 - Single left field (7) D8 - Double center field (8) T9 - Triple right field (9) HR - Home run K - Strikeout W - Walk HP - Hit pitch E5 - Error third baseman (5)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"outs","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference > Event Codes (Common Examples)","what":"Outs","title":"Retrosheet Format Reference","text":"3/G - Ground first baseman (3) 8/F - Fly center fielder (8) 6-3 - Ground , shortstop (6) first baseman (3) 4-3 - Ground , second baseman (4) first baseman (3) K - Strikeout","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"advanced-plays","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference > Event Codes (Common Examples)","what":"Advanced Plays","title":"Retrosheet Format Reference","text":"S7/L - Line drive single left D9/F - Fly ball double right HR/F - Fly ball home run 64(1)3/GDP - Ground double play, 6-4-3, runner first FC5/G - Fielder’s choice, ground ball third SB2 - Stolen base, second CS2(26) - Caught stealing second, catcher (2) shortstop (6)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"modifiers","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference > Event Codes (Common Examples)","what":"Modifiers","title":"Retrosheet Format Reference","text":"/G - Ground ball /F - Fly ball /L - Line drive /P - Pop /BG - Bunt, ground ball .1-3 - Runner advances first third .2-H - Runner scores second .3XH(92) - Runner home third, right fielder (9) catcher (2)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"using-retrosheetshow-with-event-codes","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference","what":"Using retrosheetshow with Event Codes","title":"Retrosheet Format Reference","text":"","code":"library(retrosheetshow) library(dplyr) library(stringr)  # Get 2024 data events_2024 <- get_events(year = 2024) plays <- get_plays(events_2024)  # Find all home runs home_runs <- plays |>   filter(str_detect(event, \"^HR\"))  # Find all strikeouts strikeouts <- plays |>   filter(str_detect(event, \"^K\"))  # Find all stolen bases stolen_bases <- plays |>   filter(str_detect(event, \"SB[23H]\"))  # Find ground into double plays gdp <- plays |>   filter(str_detect(event, \"GDP\"))"},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"resources","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference","what":"Resources","title":"Retrosheet Format Reference","text":"Retrosheet Event File Documentation Retrosheet Home Play--Play Files Team Codes Ballpark Codes","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/RETROSHEET_FORMAT.html","id":"attribution","dir":"Articles","previous_headings":"Retrosheet Event File Format Reference","what":"Attribution","title":"Retrosheet Format Reference","text":"Per Retrosheet’s requirements: information used obtained free charge copyrighted Retrosheet. Interested parties may contact Retrosheet 20 Sunset Rd., Newark, DE 19711.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"game-logs","dir":"Articles","previous_headings":"","what":"Game Logs","title":"Game Logs, Rosters, and Schedules","text":"Game logs provide summary statistics game (one row per game, ~170 columns). ’re much faster download full play--play events.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"download-game-logs","dir":"Articles","previous_headings":"Game Logs","what":"Download Game Logs","title":"Game Logs, Rosters, and Schedules","text":"Sample 2024 Game Logs (selected columns)","code":"library(retrosheetshow) library(dplyr)  # Download 2024 game logs gamelogs_2024 <- get_gamelogs(year = 2024) head(gamelogs_2024)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"home-field-advantage","dir":"Articles","previous_headings":"Game Logs","what":"Home Field Advantage","title":"Game Logs, Rosters, and Schedules","text":"Home teams win 54% games","code":"gamelogs_2024 |>   mutate(     home_won = as.numeric(home_score) > as.numeric(visiting_score)   ) |>   summarize(     total_games = n(),     home_win_pct = mean(home_won)   )"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"highest-scoring-games","dir":"Articles","previous_headings":"Game Logs","what":"Highest Scoring Games","title":"Game Logs, Rosters, and Schedules","text":"Top 5 Highest Scoring Games 2024","code":"gamelogs_2024 |>   mutate(     total_runs = as.numeric(visiting_score) + as.numeric(home_score)   ) |>   arrange(desc(total_runs)) |>   select(date, visiting_team, home_team, visiting_score, home_score, total_runs) |>   head(5)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"top-winning-pitchers","dir":"Articles","previous_headings":"Game Logs","what":"Top Winning Pitchers","title":"Game Logs, Rosters, and Schedules","text":"Pitchers Wins 2024","code":"gamelogs_2024 |>   count(winning_pitcher_name, sort = TRUE) |>   head(5)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"field-descriptions","dir":"Articles","previous_headings":"Game Logs","what":"Field Descriptions","title":"Game Logs, Rosters, and Schedules","text":"Sample Home Run Fields Game Logs","code":"# See all available fields fields <- gamelog_fields()  # Find fields related to home runs fields |>   filter(grepl(\"hr\", field_name, ignore.case = TRUE))"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"rosters","dir":"Articles","previous_headings":"","what":"Rosters","title":"Game Logs, Rosters, and Schedules","text":"Get team rosters year player information.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"all-rosters","dir":"Articles","previous_headings":"Rosters","what":"All Rosters","title":"Game Logs, Rosters, and Schedules","text":"Sample 2024 Rosters","code":"# Get all 2024 rosters rosters_2024 <- get_rosters(year = 2024) head(rosters_2024)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"specific-team","dir":"Articles","previous_headings":"Rosters","what":"Specific Team","title":"Game Logs, Rosters, and Schedules","text":"Sample Yankees 2024 Roster","code":"# Yankees roster yankees <- get_rosters(year = 2024, team = \"NYA\") yankees |> select(last_name, first_name, position, bats, throws) |> head(5)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"batting-hand-analysis","dir":"Articles","previous_headings":"Rosters","what":"Batting Hand Analysis","title":"Game Logs, Rosters, and Schedules","text":"Batting Hand Distribution","code":"rosters_2024 |>   count(bats) |>   mutate(pct = n / sum(n))"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"multi-year-tracking","dir":"Articles","previous_headings":"Rosters","what":"Multi-Year Tracking","title":"Game Logs, Rosters, and Schedules","text":"","code":"# Track roster changes over time multi_year_rosters <- get_rosters(year = 2022:2024, team = \"NYA\")  # Find players on roster multiple years multi_year_rosters |>   count(player_id, last_name, first_name, sort = TRUE) |>   filter(n > 1)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"schedules","dir":"Articles","previous_headings":"","what":"Schedules","title":"Game Logs, Rosters, and Schedules","text":"Access game schedules dates, times, teams.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"download-schedule","dir":"Articles","previous_headings":"Schedules","what":"Download Schedule","title":"Game Logs, Rosters, and Schedules","text":"Sample 2024 Schedule","code":"# Get 2024 schedule schedule_2024 <- get_schedules(year = 2024) head(schedule_2024)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"find-day-games","dir":"Articles","previous_headings":"Schedules","what":"Find Day Games","title":"Game Logs, Rosters, and Schedules","text":"Teams Day Games 2024","code":"schedule_2024 |>   filter(grepl(\"^1[0-4]:\", game_time)) |>   count(home_team, sort = TRUE) |>   head(5)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"games-by-day-of-week","dir":"Articles","previous_headings":"Schedules","what":"Games by Day of Week","title":"Game Logs, Rosters, and Schedules","text":"Games Day Week 2024","code":"schedule_2024 |>   count(day_of_week, sort = TRUE)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"team-schedule","dir":"Articles","previous_headings":"Schedules","what":"Team Schedule","title":"Game Logs, Rosters, and Schedules","text":"","code":"# Yankees home games schedule_2024 |>   filter(home_team == \"NYA\") |>   select(date, visiting_team, game_time, day_of_week)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"postponed-games","dir":"Articles","previous_headings":"Schedules","what":"Postponed Games","title":"Game Logs, Rosters, and Schedules","text":"","code":"schedule_2024 |>   filter(!is.na(postponement_indicator) & postponement_indicator != \"\")"},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"join-game-logs-with-rosters","dir":"Articles","previous_headings":"Combined Analysis","what":"Join Game Logs with Rosters","title":"Game Logs, Rosters, and Schedules","text":"","code":"# Get winning pitchers from Yankees yankees_wins <- gamelogs_2024 |>   filter(home_team == \"NYA\" | visiting_team == \"NYA\") |>   left_join(     rosters_2024 |> select(player_id, last_name, first_name, team),     by = c(\"winning_pitcher_id\" = \"player_id\")   ) |>   filter(team == \"NYA\")"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"schedule-vs-actual-games","dir":"Articles","previous_headings":"Combined Analysis","what":"Schedule vs Actual Games","title":"Game Logs, Rosters, and Schedules","text":"","code":"# Compare scheduled vs actual scheduled <- schedule_2024 |>   count(date, name = \"scheduled_games\")  actual <- gamelogs_2024 |>   count(date, name = \"actual_games\")  scheduled |>   left_join(actual, by = \"date\") |>   filter(scheduled_games != actual_games | is.na(actual_games))"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"complete-team-analysis","dir":"Articles","previous_headings":"Combined Analysis","what":"Complete Team Analysis","title":"Game Logs, Rosters, and Schedules","text":"","code":"# Comprehensive Yankees analysis yankees_2024 <- list(   roster = get_rosters(year = 2024, team = \"NYA\"),   schedule = get_schedules(year = 2024) |>     filter(home_team == \"NYA\" | visiting_team == \"NYA\"),   games = get_gamelogs(year = 2024) |>     filter(home_team == \"NYA\" | visiting_team == \"NYA\") )  # Summary statistics cat(\"Roster size:\", nrow(yankees_2024$roster), \"players\\n\") cat(\"Games played:\", nrow(yankees_2024$games), \"\\n\")  # Home vs away record yankees_2024$games |>   mutate(     location = if_else(home_team == \"NYA\", \"Home\", \"Away\"),     won = if_else(       home_team == \"NYA\",       as.numeric(home_score) > as.numeric(visiting_score),       as.numeric(visiting_score) > as.numeric(home_score)     )   ) |>   group_by(location) |>   summarize(     games = n(),     wins = sum(won),     win_pct = mean(won)   )"},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"game-logs-are-faster-than-events","dir":"Articles","previous_headings":"Performance Tips","what":"Game logs are faster than events","title":"Game Logs, Rosters, and Schedules","text":"","code":"# For summary stats, use game logs (seconds vs minutes) system.time({   gamelogs <- get_gamelogs(year = 2024) })  # vs full events (slower) system.time({   events <- get_events(year = 2024) })"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"rosters-reuse-event-cache","dir":"Articles","previous_headings":"Performance Tips","what":"Rosters reuse event cache","title":"Game Logs, Rosters, and Schedules","text":"","code":"# If you've already downloaded events, rosters are instant events <- get_events(year = 2024) rosters <- get_rosters(year = 2024)  # Very fast!"},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"download-once-analyze-many-times","dir":"Articles","previous_headings":"Performance Tips","what":"Download once, analyze many times","title":"Game Logs, Rosters, and Schedules","text":"","code":"# Efficient workflow data_2024 <- list(   events = get_events(year = 2024),   gamelogs = get_gamelogs(year = 2024),   rosters = get_rosters(year = 2024),   schedule = get_schedules(year = 2024) )  # Now analyze without re-downloading # ... your analysis here ..."},{"path":"https://tgerke.github.io/retrosheetshow/articles/gamelogs_rosters_schedules.html","id":"see-also","dir":"Articles","previous_headings":"","what":"See Also","title":"Game Logs, Rosters, and Schedules","text":"?get_gamelogs - Game log documentation ?get_rosters - Roster documentation ?get_schedules - Schedule documentation See Performance Guide optimization tips","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/getting_started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with retrosheetshow","text":"retrosheetshow provides convenient tidy interface accessing Retrosheet baseball data R. vignette get started basic functionality.","code":"library(retrosheetshow) library(dplyr)"},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/articles/getting_started.html","id":"list-available-data","dir":"Articles","previous_headings":"Quick Start","what":"List Available Data","title":"Getting Started with retrosheetshow","text":"Use list_events() discover data available:","code":"# List recent regular season files list_events(year = 2020:2024)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/getting_started.html","id":"download-play-by-play-events","dir":"Articles","previous_headings":"Quick Start","what":"Download Play-by-Play Events","title":"Getting Started with retrosheetshow","text":"Note: Files automatically cached fast repeated access!","code":"# Download 2024 regular season # First time: ~2 minutes (downloads and caches) # Subsequent times: ~5 seconds (uses cache) events_2024 <- get_events(year = 2024)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/getting_started.html","id":"extract-game-information","dir":"Articles","previous_headings":"Quick Start","what":"Extract Game Information","title":"Getting Started with retrosheetshow","text":"Sample Game Information Sample Play--Play Data","code":"# Get game-level metadata games <- get_game_info(events_2024) head(games) # Get play-by-play data plays <- get_plays(events_2024) head(plays)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/getting_started.html","id":"game-logs-faster-alternative","dir":"Articles","previous_headings":"","what":"Game Logs (Faster Alternative)","title":"Getting Started with retrosheetshow","text":"summary statistics without full play--play detail: Sample 2024 Game Logs Home Field Advantage 2024","code":"# Download game logs (much faster than events) gamelogs_2024 <- get_gamelogs(year = 2024) head(gamelogs_2024) # Calculate home field advantage gamelogs_2024 |>   mutate(     home_won = as.numeric(home_score) > as.numeric(visiting_score)   ) |>   summarize(     home_win_pct = mean(home_won)   )"},{"path":"https://tgerke.github.io/retrosheetshow/articles/getting_started.html","id":"team-rosters","dir":"Articles","previous_headings":"","what":"Team Rosters","title":"Getting Started with retrosheetshow","text":"Sample Yankees Roster 2024","code":"# Get all 2024 rosters rosters <- get_rosters(year = 2024) head(rosters)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/getting_started.html","id":"game-schedules","dir":"Articles","previous_headings":"","what":"Game Schedules","title":"Getting Started with retrosheetshow","text":"Sample 2024 Schedule","code":"# Get 2024 schedule schedule <- get_schedules(year = 2024) head(schedule)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/getting_started.html","id":"reference-data","dir":"Articles","previous_headings":"","what":"Reference Data","title":"Getting Started with retrosheetshow","text":"Sample Ballpark Reference Data","code":"# Get ballpark codes parks <- get_park_ids() head(parks)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/getting_started.html","id":"cache-management","dir":"Articles","previous_headings":"","what":"Cache Management","title":"Getting Started with retrosheetshow","text":"","code":"# View cached files cache_status()  # Clear cache to free space clear_cache()  # Disable caching temporarily use_cache(FALSE)"},{"path":"https://tgerke.github.io/retrosheetshow/articles/getting_started.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Getting Started with retrosheetshow","text":"See Game Logs, Rosters & Schedules article examples Read Performance Guide optimization tips Check Retrosheet Format Reference understand data structure Browse Reference documentation available functions","code":""},{"path":"https://tgerke.github.io/retrosheetshow/articles/getting_started.html","id":"complete-example","dir":"Articles","previous_headings":"","what":"Complete Example","title":"Getting Started with retrosheetshow","text":"","code":"library(retrosheetshow) library(dplyr)  # Get 2024 data gamelogs <- get_gamelogs(year = 2024) rosters <- get_rosters(year = 2024)  # Analyze Yankees yankees_games <- gamelogs |>   filter(home_team == \"NYA\" | visiting_team == \"NYA\") |>   mutate(     yankees_score = if_else(home_team == \"NYA\",                              as.numeric(home_score),                              as.numeric(visiting_score)),     opponent_score = if_else(home_team == \"NYA\",                              as.numeric(visiting_score),                              as.numeric(home_score)),     won = yankees_score > opponent_score   )  # Win percentage yankees_games |>   summarize(     games = n(),     wins = sum(won),     win_pct = mean(won)   )"},{"path":"https://tgerke.github.io/retrosheetshow/articles/getting_started.html","id":"attribution","dir":"Articles","previous_headings":"","what":"Attribution","title":"Getting Started with retrosheetshow","text":"Remember cite Retrosheet using data: information used obtained free charge copyrighted Retrosheet. Interested parties may contact Retrosheet 20 Sunset Rd., Newark, DE 19711.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Travis Gerke. Author, maintainer.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gerke T (2024). retrosheetshow: Access Parse Retrosheet Baseball Data. R package version 0.0.0.9000, https://github.com/tgerke/retrosheetshow.","code":"@Manual{,   title = {retrosheetshow: Access and Parse Retrosheet Baseball Data},   author = {Travis Gerke},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://github.com/tgerke/retrosheetshow}, }"},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"retrosheetshow-","dir":"","previous_headings":"","what":"Access Retrosheet Baseball Data","title":"Access Retrosheet Baseball Data","text":"RETROSHEET DATA NOTICE information used obtained free charge copyrighted Retrosheet. Interested parties may contact Retrosheet 20 Sunset Rd., Newark, DE 19711. Website: https://www.retrosheet.org retrosheetshow provides convenient tidy interface accessing Retrosheet baseball data R. package follows tidyverse principles, making easy integrate Retrosheet’s play--play event files, game logs, rosters, schedules data analysis workflows.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access Retrosheet Baseball Data","text":"can install development version retrosheetshow GitHub:","code":"# install.packages(\"remotes\") remotes::install_github(\"tgerke/retrosheetshow\")"},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Access Retrosheet Baseball Data","text":"Retrosheet non-profit organization digitized play--play accounts baseball games. package makes easy : List available event files year type (regular season, -star, post-season) Download parse event files tidy tibbles Extract specific information like game metadata play--play details","code":""},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"list-available-event-files","dir":"","previous_headings":"Basic Usage","what":"List Available Event Files","title":"Access Retrosheet Baseball Data","text":"Use list_events() see data available:","code":"library(retrosheetshow)  # List recent regular season files list_events(year = 2020:2024)  # List all available All-Star game files list_events(type = \"allstar\")  # List multiple types for a specific year list_events(year = 2023, type = c(\"regular\", \"post\"))"},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"download-event-data","dir":"","previous_headings":"Basic Usage","what":"Download Event Data","title":"Access Retrosheet Baseball Data","text":"Use get_events() download parse event files: Note: First downloads take 1-2 minutes automatically cached. Subsequent access much faster!","code":"# Download 2024 regular season # First time: ~2 minutes (downloads and caches) # Subsequent times: ~5 seconds (uses cache) events_2024 <- get_events(year = 2024)  # Pipe from list_events() recent_postseason <- list_events(year = 2020:2024, type = \"post\") |>   get_events()"},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"extract-specific-information","dir":"","previous_headings":"Basic Usage","what":"Extract Specific Information","title":"Access Retrosheet Baseball Data","text":"Use helper functions extract game info play--play data:","code":"# Get game-level metadata game_info <- get_game_info(events_2024)  # Get play-by-play data plays <- get_plays(events_2024)  # Parse specific record types parsed <- parse_event_records(events_2024, record_types = c(\"play\", \"sub\"))"},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"game-logs-rosters-and-schedules","dir":"","previous_headings":"Basic Usage","what":"Game Logs, Rosters, and Schedules","title":"Access Retrosheet Baseball Data","text":"Access summary data team rosters:","code":"# Game logs (one row per game with summary stats) gamelogs_2024 <- get_gamelogs(year = 2024)  # Team rosters by year rosters_2024 <- get_rosters(year = 2024) yankees <- get_rosters(year = 2024, team = \"NYA\")  # Game schedules schedule_2024 <- get_schedules(year = 2024)"},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"reference-data-helpers","dir":"","previous_headings":"Basic Usage","what":"Reference Data Helpers","title":"Access Retrosheet Baseball Data","text":"Get Retrosheet reference data parks, teams, players:","code":"library(dplyr)  # Get ballpark codes and info parks <- get_park_ids()  # Get team codes for a specific year teams <- get_team_ids(2024)  # Get player biographical database players <- get_player_ids()  # Example: Find Fenway Park info parks |> filter(grepl(\"Fenway\", name))"},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"workflow-example","dir":"","previous_headings":"","what":"Workflow Example","title":"Access Retrosheet Baseball Data","text":"’s complete workflow analyze recent World Series games:","code":"library(retrosheetshow) library(dplyr)  # Get recent post-season data postseason <- list_events(year = 2020:2024, type = \"post\") |>   get_events()  # Extract game information games <- get_game_info(postseason)  # Filter to World Series games world_series <- games |>   filter(grepl(\"^WS\", game_id))  # Get play-by-play for these games plays <- get_plays(postseason) |>   semi_join(world_series, by = \"game_id\")"},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"live-data-examples","dir":"","previous_headings":"","what":"Live Data Examples","title":"Access Retrosheet Baseball Data","text":"examples real Retrosheet data:","code":""},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"game-logs-quick-summary-statistics","dir":"","previous_headings":"Live Data Examples","what":"Game Logs: Quick Summary Statistics","title":"Access Retrosheet Baseball Data","text":"Game logs provide fast access summary statistics (one row per game): Sample 2023 Game Logs","code":"library(retrosheetshow) library(dplyr)  # Download 2023 game logs (we'll use 2023 to show completed season data) gamelogs <- get_gamelogs(year = 2023)  # Preview the data gamelogs |>   select(date, visiting_team, home_team, visiting_score, home_score,           winning_pitcher_name, attendance) |>   head(5) |>   knitr::kable()"},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"home-field-advantage-analysis","dir":"","previous_headings":"Live Data Examples","what":"Home Field Advantage Analysis","title":"Access Retrosheet Baseball Data","text":"2023 Home Field Advantage","code":"# Calculate home field advantage gamelogs |>   mutate(     home_score = as.numeric(home_score),     visiting_score = as.numeric(visiting_score),     home_won = home_score > visiting_score   ) |>   summarize(     total_games = n(),     home_wins = sum(home_won),     home_win_pct = scales::percent(mean(home_won), accuracy = 0.1)   ) |>   knitr::kable(caption = \"2023 Home Field Advantage\")"},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"team-rosters","dir":"","previous_headings":"Live Data Examples","what":"Team Rosters","title":"Access Retrosheet Baseball Data","text":"Get display team rosters: Sample Yankees 2023 Roster","code":"# Get Yankees 2023 roster yankees <- get_rosters(year = 2023, team = \"NYA\")  yankees |>   select(last_name, first_name, bats, throws, position) |>   arrange(last_name) |>   head(10) |>   knitr::kable()"},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"top-winning-pitchers","dir":"","previous_headings":"Live Data Examples","what":"Top Winning Pitchers","title":"Access Retrosheet Baseball Data","text":"Top 10 Winning Pitchers 2023","code":"# Most wins in 2023 gamelogs |>   count(winning_pitcher_name, name = \"wins\", sort = TRUE) |>   head(10) |>   knitr::kable(col.names = c(\"Pitcher\", \"Wins\"))"},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"data-types","dir":"","previous_headings":"","what":"Data Types","title":"Access Retrosheet Baseball Data","text":"retrosheetshow provides access multiple Retrosheet data formats:","code":""},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"play-by-play-events","dir":"","previous_headings":"Data Types","what":"Play-by-Play Events","title":"Access Retrosheet Baseball Data","text":"Detailed play--play data (core Retrosheet). Event files contain several types records: id: Game identifier version: File format version info: Game metadata (date, teams, site, attendance, etc.) start: Starting lineups play: Play--play events (heart data) sub: Player substitutions com: Comments data: Additional data (earned runs, etc.) package parses tidy format preserving original structure.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"game-logs","dir":"","previous_headings":"Data Types","what":"Game Logs","title":"Access Retrosheet Baseball Data","text":"Summary statistics game (one row per game). Much smaller faster events: - Team statistics (runs, hits, errors, etc.) - Pitcher decisions (W/L/S) - Starting lineups - Umpires managers - ~170 fields per game","code":""},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"rosters","dir":"","previous_headings":"Data Types","what":"Rosters","title":"Access Retrosheet Baseball Data","text":"Team rosters year: - Player names IDs - Batting/throwing hands - Primary positions","code":""},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"schedules","dir":"","previous_headings":"Data Types","what":"Schedules","title":"Access Retrosheet Baseball Data","text":"Game schedules showing: - Planned game dates times - Home visiting teams - Postponement information","code":""},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"retrosheet-attribution","dir":"","previous_headings":"","what":"Retrosheet Attribution","title":"Access Retrosheet Baseball Data","text":"package uses Retrosheet data. Per Retrosheet’s requirements, notice must appear prominently: information used obtained free charge copyrighted Retrosheet. Interested parties may contact Retrosheet 20 Sunset Rd., Newark, DE 19711. Retrosheet -volunteer 501(c)(3) charitable organization. support incredible work: - Volunteer: Visit retrosheet.org - Donate: retrosheet.org/donate retrosheetshow package affiliated Retrosheet grateful work preserving baseball history.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Access Retrosheet Baseball Data","text":"Smart caching: Downloaded files cached locally - first download takes 1-2 min, subsequent access ~5 sec Tidy design: Returns tibbles works seamlessly dplyr, tidyr, tidyverse packages Pipe-friendly: Functions designed use |> %>% Progress feedback: Uses cli informative progress messages Cache management: cache_status(), clear_cache(), use_cache() full control Flexible: Download specific years/types explore available data Type-safe parsing: Converts fields appropriate types (integers, characters, etc.)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"data-coverage","dir":"","previous_headings":"","what":"Data Coverage","title":"Access Retrosheet Baseball Data","text":"Retrosheet digitized data spanning century: Regular season: 1911-2024 (earlier box score data available) -Star games: 1933-2024 (gaps) Post-season: 1903-2024 (gaps) Negro Leagues: Various years available See Retrosheet website complete details data availability.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"Access Retrosheet Baseball Data","text":"First downloads take 1-2 minutes, files automatically cached fast repeated access: See PERFORMANCE.md detailed performance tips benchmarks.","code":"# View cached files cache_status()  # Clear cache to free disk space clear_cache()"},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"related-resources","dir":"","previous_headings":"","what":"Related Resources","title":"Access Retrosheet Baseball Data","text":"Retrosheet home Event file documentation BEVENT/BGAME tools Performance guide","code":""},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Access Retrosheet Baseball Data","text":"MIT + file LICENSE","code":""},{"path":"https://tgerke.github.io/retrosheetshow/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Access Retrosheet Baseball Data","text":"Please note retrosheetshow released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/cache_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Retrosheet Cache Directory — cache_dir","title":"Get Retrosheet Cache Directory — cache_dir","text":"Returns path retrosheetshow cache directory downloaded files stored.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/cache_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Retrosheet Cache Directory — cache_dir","text":"","code":"cache_dir(create = TRUE)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/cache_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Retrosheet Cache Directory — cache_dir","text":"create Logical. TRUE (default), creates directory exist.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/cache_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Retrosheet Cache Directory — cache_dir","text":"Character string cache directory path","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/cache_dir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Retrosheet Cache Directory — cache_dir","text":"cache directory determined tools::R_user_dir(\"retrosheetshow\", \"cache\"). systems : macOS: ~/Library/Caches/org.R-project.R/R/retrosheetshow Linux: ~/.cache/R/retrosheetshow Windows: C:/Users/<user>/AppData/Local/R/cache/R/retrosheetshow","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/cache_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Retrosheet Cache Directory — cache_dir","text":"","code":"if (FALSE) { # \\dontrun{ # Get cache directory cache_dir()  # List cached files list.files(cache_dir()) } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/cache_file_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Cache File Path — cache_file_path","title":"Get Cache File Path — cache_file_path","text":"Get Cache File Path","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/cache_file_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Cache File Path — cache_file_path","text":"","code":"cache_file_path(year, type = \"regular\")"},{"path":"https://tgerke.github.io/retrosheetshow/reference/cache_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Show Cache Status — cache_status","title":"Show Cache Status — cache_status","text":"Displays information retrosheetshow cache, including size contents.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/cache_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show Cache Status — cache_status","text":"","code":"cache_status()"},{"path":"https://tgerke.github.io/retrosheetshow/reference/cache_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show Cache Status — cache_status","text":"tibble information cached files","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/cache_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show Cache Status — cache_status","text":"","code":"if (FALSE) { # \\dontrun{ # View cache status cache_status() } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/caching_enabled.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Caching is Enabled — caching_enabled","title":"Check if Caching is Enabled — caching_enabled","text":"Check Caching Enabled","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/caching_enabled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Caching is Enabled — caching_enabled","text":"","code":"caching_enabled()"},{"path":"https://tgerke.github.io/retrosheetshow/reference/clear_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear Retrosheet Cache — clear_cache","title":"Clear Retrosheet Cache — clear_cache","text":"Removes cached Retrosheet files free disk space force fresh downloads.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/clear_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear Retrosheet Cache — clear_cache","text":"","code":"clear_cache(year = NULL, type = NULL, confirm = TRUE)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/clear_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear Retrosheet Cache — clear_cache","text":"year Optional. Numeric vector specific years remove cache. NULL (default), removes cached files. type Optional. Character vector types remove (\"regular\", \"allstar\", \"post\"). NULL (default), removes types. confirm Logical. TRUE (default), asks confirmation deleting.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/clear_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear Retrosheet Cache — clear_cache","text":"Invisibly returns number files deleted","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/clear_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear Retrosheet Cache — clear_cache","text":"","code":"if (FALSE) { # \\dontrun{ # Clear all cache clear_cache()  # Clear specific year clear_cache(year = 2024)  # Clear multiple years without confirmation clear_cache(year = 2020:2023, confirm = FALSE)  # Clear only postseason cache clear_cache(type = \"post\") } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/construct_event_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Retrosheet Event File URLs — construct_event_url","title":"Construct Retrosheet Event File URLs — construct_event_url","text":"Construct Retrosheet Event File URLs","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/construct_event_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Retrosheet Event File URLs — construct_event_url","text":"","code":"construct_event_url(year, type = \"regular\")"},{"path":"https://tgerke.github.io/retrosheetshow/reference/construct_event_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct Retrosheet Event File URLs — construct_event_url","text":"year Year data type Type events (\"regular\", \"allstar\", \"post\")","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/dot-onAttach.html","id":null,"dir":"Reference","previous_headings":"","what":"Package startup message — .onAttach","title":"Package startup message — .onAttach","text":"Package startup message","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/dot-onAttach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package startup message — .onAttach","text":"","code":".onAttach(libname, pkgname)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/extract_game_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract game ID from record — extract_game_id","title":"Extract game ID from record — extract_game_id","text":"Extract game ID record","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/extract_game_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract game ID from record — extract_game_id","text":"","code":"extract_game_id(record_type, fields)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/gamelog_field_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Game Log Field Names — gamelog_field_names","title":"Get Game Log Field Names — gamelog_field_names","text":"Get Game Log Field Names","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/gamelog_field_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Game Log Field Names — gamelog_field_names","text":"","code":"gamelog_field_names()"},{"path":"https://tgerke.github.io/retrosheetshow/reference/gamelog_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Game Log Field Descriptions — gamelog_fields","title":"Get Game Log Field Descriptions — gamelog_fields","text":"Returns tibble describing fields Retrosheet game logs.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/gamelog_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Game Log Field Descriptions — gamelog_fields","text":"","code":"gamelog_fields()"},{"path":"https://tgerke.github.io/retrosheetshow/reference/gamelog_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Game Log Field Descriptions — gamelog_fields","text":"tibble columns field_name description","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/gamelog_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Game Log Field Descriptions — gamelog_fields","text":"","code":"if (FALSE) { # \\dontrun{ # See all field descriptions gamelog_fields()  # Find fields about home runs gamelog_fields() |> filter(grepl(\"hr\", field_name, ignore.case = TRUE)) } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_available_years.html","id":null,"dir":"Reference","previous_headings":"","what":"Get available years for a given event type — get_available_years","title":"Get available years for a given event type — get_available_years","text":"Get available years given event type","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_available_years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get available years for a given event type — get_available_years","text":"","code":"get_available_years(type = \"regular\")"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Parse Retrosheet Event Files — get_events","title":"Download and Parse Retrosheet Event Files — get_events","text":"Downloads Retrosheet event files parses tidy tibble format. function can accept either tibble list_events() direct parameters specify files download.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and Parse Retrosheet Event Files — get_events","text":"","code":"get_events(   events = NULL,   year = NULL,   type = \"regular\",   parse = TRUE,   verbose = TRUE )"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and Parse Retrosheet Event Files — get_events","text":"events Optional tibble list_events(). provided, downloads files specified tibble. NULL, uses year type parameters. year Numeric vector years download. Ignored events provided. type Character vector event types (\"regular\", \"allstar\", \"post\"). Default \"regular\". Ignored events provided. parse Logical. TRUE (default), parses event files tibble. FALSE, returns raw text content. verbose Logical. TRUE (default), displays progress messages.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and Parse Retrosheet Event Files — get_events","text":"tibble containing parsed event data columns depending record type. Common columns include: game_id - Unique game identifier record_type - Type record (id, version, info, start, play, sub, etc.) year - Year game type - Type event file (regular, allstar, post)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download and Parse Retrosheet Event Files — get_events","text":"Retrosheet event files contain play--play data structured text format. line represents different type record (game info, starting lineups, plays, substitutions, etc.). function downloads files parses tidy format suitable analysis.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_events.html","id":"caching","dir":"Reference","previous_headings":"","what":"Caching","title":"Download and Parse Retrosheet Event Files — get_events","text":"Downloaded files cached default speed repeated access. first download may take 1-2 minutes, subsequent calls much faster (seconds). Use cache_status() view cached files clear_cache() remove . Disable caching use_cache(FALSE).","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and Parse Retrosheet Event Files — get_events","text":"","code":"if (FALSE) { # \\dontrun{ # Download and parse specific years events_2024 <- get_events(year = 2024)  # Use with list_events() in a pipe recent_games <- list_events(year = 2020:2024) |>   get_events()  # Download multiple types postseason_2023 <- get_events(year = 2023, type = \"post\")  # Get raw data without parsing raw_data <- get_events(year = 2024, parse = FALSE) } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_game_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Game Information from Parsed Events — get_game_info","title":"Get Game Information from Parsed Events — get_game_info","text":"Extracts game-level information (date, teams, site, etc.) parsed event data.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_game_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Game Information from Parsed Events — get_game_info","text":"","code":"get_game_info(events_data)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_game_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Game Information from Parsed Events — get_game_info","text":"events_data Tibble get_events()","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_game_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Game Information from Parsed Events — get_game_info","text":"tibble one row per game containing game metadata","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_game_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Game Information from Parsed Events — get_game_info","text":"","code":"if (FALSE) { # \\dontrun{ events <- get_events(year = 2024) game_info <- get_game_info(events) } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_gamelogs.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Parse Retrosheet Game Log Files — get_gamelogs","title":"Download and Parse Retrosheet Game Log Files — get_gamelogs","text":"Downloads Retrosheet game log files parses tidy tibble. Game logs contain one row per game summary statistics.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_gamelogs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and Parse Retrosheet Game Log Files — get_gamelogs","text":"","code":"get_gamelogs(gamelogs = NULL, year = NULL, verbose = TRUE)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_gamelogs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and Parse Retrosheet Game Log Files — get_gamelogs","text":"gamelogs Optional tibble list_gamelogs(). NULL, uses year. year Numeric vector years download. Ignored gamelogs provided. verbose Logical. TRUE (default), displays progress messages.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_gamelogs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and Parse Retrosheet Game Log Files — get_gamelogs","text":"tibble game-level statistics. Columns include: date - Game date game_number - Game number (0 = single game, 1-2 = doubleheader) day_of_week - Day week visiting_team - Visiting team code visiting_league - Visiting team league visiting_game_number - Visiting team's game number home_team - Home team code home_league - Home team league home_game_number - Home team's game number visiting_score - Visiting team runs home_score - Home team runs ~160 fields detailed statistics","code":""},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_gamelogs.html","id":"caching","dir":"Reference","previous_headings":"","what":"Caching","title":"Download and Parse Retrosheet Game Log Files — get_gamelogs","text":"Game log files cached automatically fast repeated access. Use cache_status() view cached files clear_cache() remove .","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_gamelogs.html","id":"field-descriptions","dir":"Reference","previous_headings":"","what":"Field Descriptions","title":"Download and Parse Retrosheet Game Log Files — get_gamelogs","text":"Game logs contain extensive statistics. See glfields.txt complete field descriptions. Use gamelog_fields() get vector field names descriptions.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_gamelogs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and Parse Retrosheet Game Log Files — get_gamelogs","text":"","code":"if (FALSE) { # \\dontrun{ # Download 2024 game log gamelogs_2024 <- get_gamelogs(year = 2024)  # Pipe from list gamelogs <- list_gamelogs(year = 2020:2024) |>   get_gamelogs()  # Analyze home field advantage gamelogs_2024 |>   mutate(home_win = home_score > visiting_score) |>   summarize(home_win_pct = mean(home_win)) } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_park_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Retrosheet Park IDs — get_park_ids","title":"Get Retrosheet Park IDs — get_park_ids","text":"Downloads returns official Retrosheet ballpark codes current stadium names.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_park_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Retrosheet Park IDs — get_park_ids","text":"","code":"get_park_ids()"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_park_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Retrosheet Park IDs — get_park_ids","text":"tibble columns: park_id - Retrosheet ballpark code name - Stadium name city - City state - State/Province start - First date used end - Last date used league - League(s)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_park_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Retrosheet Park IDs — get_park_ids","text":"","code":"if (FALSE) { # \\dontrun{ # Get all park IDs parks <- get_park_ids()  # Find Fenway Park parks |> filter(grepl(\"Fenway\", name)) } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_player_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Retrosheet Player IDs — get_player_ids","title":"Get Retrosheet Player IDs — get_player_ids","text":"Downloads Retrosheet biofile database containing player biographical information IDs.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_player_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Retrosheet Player IDs — get_player_ids","text":"","code":"get_player_ids()"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_player_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Retrosheet Player IDs — get_player_ids","text":"tibble player information including: player_id - Retrosheet player ID last_name - Last name first_name - First name mlb_debut - MLB debut date biographical fields","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_player_ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Retrosheet Player IDs — get_player_ids","text":"downloads large file (~3 MB) may take moment. result cached repeated use.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_player_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Retrosheet Player IDs — get_player_ids","text":"","code":"if (FALSE) { # \\dontrun{ # Get all player IDs players <- get_player_ids()  # Find Aaron Judge players |> filter(grepl(\"Judge\", last_name)) } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_plays.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Play-by-Play Data from Events — get_plays","title":"Get Play-by-Play Data from Events — get_plays","text":"Extracts parses play--play records event data.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_plays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Play-by-Play Data from Events — get_plays","text":"","code":"get_plays(events_data)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_plays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Play-by-Play Data from Events — get_plays","text":"events_data Tibble get_events()","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_plays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Play-by-Play Data from Events — get_plays","text":"tibble one row per play","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_plays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Play-by-Play Data from Events — get_plays","text":"","code":"if (FALSE) { # \\dontrun{ events <- get_events(year = 2024) plays <- get_plays(events) } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_rosters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Retrosheet Rosters — get_rosters","title":"Get Retrosheet Rosters — get_rosters","text":"Extracts team rosters Retrosheet event files. Roster files included event archives contain player information team.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_rosters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Retrosheet Rosters — get_rosters","text":"","code":"get_rosters(year, team = NULL, verbose = TRUE)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_rosters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Retrosheet Rosters — get_rosters","text":"year Numeric vector years team Optional. Character vector team codes filter. NULL (default), returns teams. verbose Logical. TRUE (default), displays progress.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_rosters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Retrosheet Rosters — get_rosters","text":"tibble columns: year - Year player_id - Retrosheet player ID last_name - Last name first_name - First name bats - Batting hand (R/L/B) throws - Throwing hand (R/L) team - Team code position - Primary position","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_rosters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Retrosheet Rosters — get_rosters","text":"Rosters extracted event file ZIP archives. first call year download event file cached. Subsequent calls use cached file.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_rosters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Retrosheet Rosters — get_rosters","text":"","code":"if (FALSE) { # \\dontrun{ # Get all 2024 rosters rosters_2024 <- get_rosters(year = 2024)  # Get Yankees roster yankees <- get_rosters(year = 2024, team = \"NYA\")  # Get multiple years rosters <- get_rosters(year = 2020:2024) } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_schedules.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Parse Retrosheet Schedule Files — get_schedules","title":"Download and Parse Retrosheet Schedule Files — get_schedules","text":"Downloads Retrosheet schedule files parses tidy tibble.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_schedules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and Parse Retrosheet Schedule Files — get_schedules","text":"","code":"get_schedules(schedules = NULL, year = NULL, verbose = TRUE)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_schedules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and Parse Retrosheet Schedule Files — get_schedules","text":"schedules Optional tibble list_schedules(). NULL, uses year. year Numeric vector years. Ignored schedules provided. verbose Logical. TRUE (default), displays progress.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_schedules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and Parse Retrosheet Schedule Files — get_schedules","text":"tibble columns: date - Game date (YYYYMMDD) game_number - Game number day_of_week - Day week visiting_team - Visiting team code visiting_league - Visiting team league home_team - Home team code home_league - Home team league game_time - Scheduled time postponement_indicator - postponed year - Year","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_schedules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and Parse Retrosheet Schedule Files — get_schedules","text":"","code":"if (FALSE) { # \\dontrun{ # Get 2024 schedule schedule_2024 <- get_schedules(year = 2024)  # Find all day games schedule_2024 |>   filter(grepl(\"^1[0-4]:\", game_time)) } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_team_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Retrosheet Team IDs — get_team_ids","title":"Get Retrosheet Team IDs — get_team_ids","text":"Downloads returns official Retrosheet team codes given year.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_team_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Retrosheet Team IDs — get_team_ids","text":"","code":"get_team_ids(year)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_team_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Retrosheet Team IDs — get_team_ids","text":"year Four-digit year","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_team_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Retrosheet Team IDs — get_team_ids","text":"tibble columns: team_id - Three-letter team code league - League (AL/NL) city - City name - Team name","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/get_team_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Retrosheet Team IDs — get_team_ids","text":"","code":"if (FALSE) { # \\dontrun{ # Get 2024 teams teams <- get_team_ids(2024)  # Get Yankees info teams |> filter(team_id == \"NYA\") } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/is_cached.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if File is in Cache — is_cached","title":"Check if File is in Cache — is_cached","text":"Check File Cache","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/is_cached.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if File is in Cache — is_cached","text":"","code":"is_cached(year, type = \"regular\")"},{"path":"https://tgerke.github.io/retrosheetshow/reference/list_events.html","id":null,"dir":"Reference","previous_headings":"","what":"List Available Retrosheet Event Files — list_events","title":"List Available Retrosheet Event Files — list_events","text":"Returns tibble available Retrosheet event files can downloaded. function checks files actually available Retrosheet servers based specified criteria.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/list_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Available Retrosheet Event Files — list_events","text":"","code":"list_events(year = NULL, type = \"regular\", check_availability = TRUE)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/list_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Available Retrosheet Event Files — list_events","text":"year Numeric vector years check. NULL (default), checks available years specified type. Can single year vector years. type Character vector specifying type(s) events list. Options : \"regular\" - Regular season games (1911-2024) \"allstar\" - -Star games (1933-2024, gaps) \"post\" - Post-season games (1903-2024, gaps) Default \"regular\". check_availability Logical. TRUE (default), verifies files actually exist Retrosheet servers. FALSE, returns years theoretical range (faster may include non-existent files).","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/list_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Available Retrosheet Event Files — list_events","text":"tibble columns: year - year data type - type events (\"regular\", \"allstar\", \"post\") url - URL download file available - Logical indicating file exists (check_availability = TRUE)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/list_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Available Retrosheet Event Files — list_events","text":"","code":"if (FALSE) { # \\dontrun{ # List all available regular season files list_events()  # List events for specific years list_events(year = 2020:2024)  # List all types for recent years list_events(year = 2023, type = c(\"regular\", \"allstar\", \"post\"))  # Quick list without checking availability list_events(year = 2020:2024, check_availability = FALSE)  # Use with get_events() in a pipe list_events(year = 2024) |>   get_events() } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/list_gamelogs.html","id":null,"dir":"Reference","previous_headings":"","what":"List Available Retrosheet Game Log Files — list_gamelogs","title":"List Available Retrosheet Game Log Files — list_gamelogs","text":"Returns tibble available Retrosheet game log files. Game logs contain summary statistics game (one row per game) rather play--play detail.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/list_gamelogs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Available Retrosheet Game Log Files — list_gamelogs","text":"","code":"list_gamelogs(year = NULL, check_availability = TRUE)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/list_gamelogs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Available Retrosheet Game Log Files — list_gamelogs","text":"year Numeric vector years check. NULL (default), checks available years (1871-2024). check_availability Logical. TRUE (default), verifies files actually exist Retrosheet servers.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/list_gamelogs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Available Retrosheet Game Log Files — list_gamelogs","text":"tibble columns: year - year data type - Always \"gamelog\" url - URL download file available - Logical indicating file exists (check_availability = TRUE)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/list_gamelogs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List Available Retrosheet Game Log Files — list_gamelogs","text":"Game logs provide summary statistics game including runs, hits, errors, pitchers, umpires, . much smaller event files faster download/parse. See glfields.txt complete field descriptions.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/list_gamelogs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Available Retrosheet Game Log Files — list_gamelogs","text":"","code":"if (FALSE) { # \\dontrun{ # List recent game logs list_gamelogs(year = 2020:2024)  # List all available (fast check) list_gamelogs(check_availability = FALSE) } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/list_schedules.html","id":null,"dir":"Reference","previous_headings":"","what":"List Available Retrosheet Schedule Files — list_schedules","title":"List Available Retrosheet Schedule Files — list_schedules","text":"Returns tibble available Retrosheet schedule files. Schedules contain planned game dates, times, teams.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/list_schedules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Available Retrosheet Schedule Files — list_schedules","text":"","code":"list_schedules(year = NULL, check_availability = TRUE)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/list_schedules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Available Retrosheet Schedule Files — list_schedules","text":"year Numeric vector years check. NULL (default), checks recent years (1877-2024). check_availability Logical. TRUE (default), verifies files actually exist.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/list_schedules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Available Retrosheet Schedule Files — list_schedules","text":"tibble columns: year - year type - Always \"schedule\" url - URL download available - Logical (check_availability = TRUE)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/list_schedules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Available Retrosheet Schedule Files — list_schedules","text":"","code":"if (FALSE) { # \\dontrun{ # List recent schedules list_schedules(year = 2020:2024) } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_data_record.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse data record — parse_data_record","title":"Parse data record — parse_data_record","text":"Parse data record","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_data_record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse data record — parse_data_record","text":"","code":"parse_data_record(fields)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_event_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Retrosheet Event File Lines — parse_event_file","title":"Parse Retrosheet Event File Lines — parse_event_file","text":"Parse Retrosheet Event File Lines","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_event_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Retrosheet Event File Lines — parse_event_file","text":"","code":"parse_event_file(lines, year)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_event_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Retrosheet Event File Lines — parse_event_file","text":"lines Character vector lines event file year Year data","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_event_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Retrosheet Event Records into Structured Format — parse_event_records","title":"Parse Retrosheet Event Records into Structured Format — parse_event_records","text":"Takes tibble raw event records parses structured format separate columns different record types.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_event_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Retrosheet Event Records into Structured Format — parse_event_records","text":"","code":"parse_event_records(events_raw, record_types = NULL)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_event_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Retrosheet Event Records into Structured Format — parse_event_records","text":"events_raw Tibble get_events() containing raw parsed records record_types Character vector record types include. NULL (default), includes record types. Common types include: \"id\" - Game ID \"version\" - File format version \"info\" - Game information (date, teams, site, etc.) \"start\" - Starting lineups \"play\" - Play--play events \"sub\" - Substitutions \"com\" - Comments \"data\" - Additional data","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_event_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Retrosheet Event Records into Structured Format — parse_event_records","text":"tibble parsed structured event data","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_event_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Retrosheet Event Records into Structured Format — parse_event_records","text":"","code":"if (FALSE) { # \\dontrun{ # Get raw events and parse them events_raw <- get_events(year = 2024)  # Parse into structured format events_parsed <- parse_event_records(events_raw)  # Get only play-by-play records plays <- parse_event_records(events_raw, record_types = \"play\") } # }"},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_info_record.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse info record — parse_info_record","title":"Parse info record — parse_info_record","text":"Parse info record","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_info_record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse info record — parse_info_record","text":"","code":"parse_info_record(fields)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_play_record.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse play record — parse_play_record","title":"Parse play record — parse_play_record","text":"Parse play record","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_play_record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse play record — parse_play_record","text":"","code":"parse_play_record(fields)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_record_by_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse individual record based on type — parse_record_by_type","title":"Parse individual record based on type — parse_record_by_type","text":"Parse individual record based type","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_record_by_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse individual record based on type — parse_record_by_type","text":"","code":"parse_record_by_type(type, fields)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_start_record.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse starting lineup record — parse_start_record","title":"Parse starting lineup record — parse_start_record","text":"Parse starting lineup record","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_start_record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse starting lineup record — parse_start_record","text":"","code":"parse_start_record(fields)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_sub_record.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse substitution record — parse_sub_record","title":"Parse substitution record — parse_sub_record","text":"Parse substitution record","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/parse_sub_record.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse substitution record — parse_sub_record","text":"","code":"parse_sub_record(fields)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/retrosheet_base_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrosheet Base URL — retrosheet_base_url","title":"Retrosheet Base URL — retrosheet_base_url","text":"Retrosheet Base URL","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/retrosheet_base_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrosheet Base URL — retrosheet_base_url","text":"","code":"retrosheet_base_url()"},{"path":"https://tgerke.github.io/retrosheetshow/reference/retrosheetshow-package.html","id":null,"dir":"Reference","previous_headings":"","what":"retrosheetshow: Access and Parse Retrosheet Baseball Data — retrosheetshow-package","title":"retrosheetshow: Access and Parse Retrosheet Baseball Data — retrosheetshow-package","text":"Provides convenient tidy interface accessing Retrosheet baseball data, including play--play event files, game logs, rosters, schedules, reference data. Functions follow tidyverse principles easy integration data analysis workflows.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/retrosheetshow-package.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main Functions","title":"retrosheetshow: Access and Parse Retrosheet Baseball Data — retrosheetshow-package","text":"Events (Play--Play) list_events(), get_events(), get_plays(), get_game_info() Game Logs (Summary Stats) list_gamelogs(), get_gamelogs(), gamelog_fields() Rosters Schedules get_rosters(), list_schedules(), get_schedules() Reference Data get_park_ids(), get_team_ids(), get_player_ids() Cache Management cache_status(), clear_cache(), use_cache()","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/retrosheetshow-package.html","id":"retrosheet-data-notice","dir":"Reference","previous_headings":"","what":"Retrosheet Data Notice","title":"retrosheetshow: Access and Parse Retrosheet Baseball Data — retrosheetshow-package","text":"IMPORTANT: information used obtained free charge copyrighted Retrosheet. Interested parties may contact Retrosheet 20 Sunset Rd., Newark, DE 19711. Website: https://www.retrosheet.org","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/retrosheetshow-package.html","id":"getting-started","dir":"Reference","previous_headings":"","what":"Getting Started","title":"retrosheetshow: Access and Parse Retrosheet Baseball Data — retrosheetshow-package","text":"","code":"library(retrosheetshow)  # Download play-by-play events events <- get_events(year = 2024)  # Get game logs (faster, summary stats) gamelogs <- get_gamelogs(year = 2024)  # Get team rosters rosters <- get_rosters(year = 2024, team = \"NYA\")"},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/reference/retrosheetshow-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"retrosheetshow: Access and Parse Retrosheet Baseball Data — retrosheetshow-package","text":"Maintainer: Travis Gerke tgerke@mail.harvard.edu","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/url_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if URL exists — url_exists","title":"Check if URL exists — url_exists","text":"Check URL exists","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/url_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if URL exists — url_exists","text":"","code":"url_exists(url)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/use_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Enable or Disable Caching — use_cache","title":"Enable or Disable Caching — use_cache","text":"Sets caching behavior retrosheetshow downloads.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/use_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enable or Disable Caching — use_cache","text":"","code":"use_cache(enabled = TRUE)"},{"path":"https://tgerke.github.io/retrosheetshow/reference/use_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enable or Disable Caching — use_cache","text":"enabled Logical. TRUE enable caching, FALSE disable.","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/use_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enable or Disable Caching — use_cache","text":"previous caching setting (invisibly)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/use_cache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Enable or Disable Caching — use_cache","text":"caching disabled, files always downloaded fresh stored cache directory. can useful testing need absolute latest data. setting stored environment variable RETROSHEETSHOW_CACHE current R session .","code":""},{"path":"https://tgerke.github.io/retrosheetshow/reference/use_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enable or Disable Caching — use_cache","text":"","code":"if (FALSE) { # \\dontrun{ # Disable caching for this session use_cache(FALSE)  # Re-enable caching use_cache(TRUE) } # }"},{"path":[]},{"path":"https://tgerke.github.io/retrosheetshow/news/index.html","id":"new-features-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"New features","title":"retrosheetshow 0.0.0.9000","text":"list_gamelogs(year) - List available game log files get_gamelogs(year) - Download parse game logs gamelog_fields() - Get field descriptions ~170 columns One row per game team stats, lineups, umpires, decisions Much smaller/faster full play--play events Cached automatically like event files Example: gamelogs <- get_gamelogs(year = 2024) get_rosters(year, team) - Extract rosters event files Player names, IDs, batting/throwing hands, positions Filter specific teams Example: yankees <- get_rosters(year = 2024, team = \"NYA\") list_schedules(year) - List available schedules get_schedules(year) - Download parse schedules Planned dates, times, teams, postponement info Cached automatically Example: schedule <- get_schedules(year = 2024) get_park_ids() - Ballpark codes stadium information get_team_ids(year) - Team codes given year get_player_ids() - Complete player biographical database helpers return tidy tibbles Example: parks |> filter(grepl(\"Fenway\", name)) Automatic retry logic exponential backoff (3 attempts) Configurable timeouts (60s data, 10s availability checks) Better error handling user feedback Uses modern httr2 retry capabilities First download: ~2 minutes Subsequent access: ~5 seconds (uses local cache) cache_status() - View cached files clear_cache() - Remove cached files free space use_cache() - Enable/disable caching current session Cache persists across R sessions See PERFORMANCE.md details Supports regular season, -star, post-season games Optional availability checking Returns tidy tibble format Automatically downloads extracts ZIP files Now smart caching fast repeated access Parses Retrosheet format structured tibbles Pipe-friendly interface Works seamlessly list_events() Handles different record types (id, info, play, sub, etc.) Returns nested tibbles parsed fields Converts info records wide format One row per game metadata columns Filters parses play records Returns structured play--play tibble","code":""},{"path":"https://tgerke.github.io/retrosheetshow/news/index.html","id":"design-principles-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Design Principles","title":"retrosheetshow 0.0.0.9000","text":"Follows tidyverse conventions Pipe-friendly functions Returns tibbles Progress feedback via cli Automatic cleanup temporary files Type-safe parsing","code":""},{"path":"https://tgerke.github.io/retrosheetshow/news/index.html","id":"data-coverage-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Data Coverage","title":"retrosheetshow 0.0.0.9000","text":"Regular season: 1911-2024 -Star games: 1933-2024 (gaps) Post-season: 1903-2024 (gaps)","code":""},{"path":"https://tgerke.github.io/retrosheetshow/news/index.html","id":"known-limitations-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Known Limitations","title":"retrosheetshow 0.0.0.9000","text":"Event files prior 1911 use box score format (yet supported) years incomplete coverage (see Retrosheet documentation) Large downloads may take time depending connection speed","code":""}]
